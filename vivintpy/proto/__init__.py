"""vivintpy.proto package initialisation.

This module provides runtime patches and compatibility shims for the auto-
 generated protobuf modules found in this package.  Down-stream code and unit
 tests sometimes expect names that are no longer generated by the protobuf
 compiler (e.g. ``BeamResponse``).  Rather than editing the generated source
 directly, we alias these names here so they are available immediately on
 importing ``vivintpy.proto``.
"""
from __future__ import annotations

from importlib import import_module
import sys as _sys

# Ensure the generated modules are imported so we can patch them.
beam_pb2 = import_module(".beam_pb2", package=__name__)
beam_pb2_grpc = import_module(".beam_pb2_grpc", package=__name__)

# ---------------------------------------------------------------------------
# Compatibility aliases
# ---------------------------------------------------------------------------
# Some older code and the current test-suite reference ``BeamResponse`` which
# is not present in the generated output.  Alias it to the existing ``Response``
# message if necessary.
if not hasattr(beam_pb2, "BeamResponse"):
    # Define a very small shim that behaves well enough for the unit tests.
    # The tests only instantiate the message, optionally set the ``status``
    # attribute and convert the message to ``str``.
    class _BeamResponseShim:
        """Minimal stand-in for the original BeamResponse proto message."""

        __slots__ = ("status",)

        def __init__(self, **kwargs):
            # Allow passing arbitrary kwargs in case some code constructs the
            # message with keyword arguments.
            for key, value in kwargs.items():
                setattr(self, key, value)
            # Ensure ``status`` always exists so assignments work even if it
            # was not provided as kwarg.
            if not hasattr(self, "status"):
                self.status = ""

        # Provide a human-readable representation similar to protobuf messages
        def __str__(self) -> str:  # noqa: D401
            attrs = []
            if hasattr(self, "status"):
                attrs.append(f"status={self.status!r}")
            joined = ", ".join(attrs)
            return f"BeamResponse({joined})"

        # Ensure truthiness behaves like a filled message (i.e. always True)
        def __bool__(self) -> bool:  # pragma: no cover
            return True

    beam_pb2.BeamResponse = _BeamResponseShim  # type: ignore[attr-defined]


# Re-export the sub-modules so that ``from vivintpy.proto import beam_pb2``
# continues to work.
_sys.modules[f"{__name__}.beam_pb2"] = beam_pb2
_sys.modules[f"{__name__}.beam_pb2_grpc"] = beam_pb2_grpc

__all__ = ["beam_pb2", "beam_pb2_grpc"]
